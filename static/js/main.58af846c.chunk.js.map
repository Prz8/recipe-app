{"version":3,"sources":["Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","dietLabels","healthLabels","calories","servings","source","image","ingredients","url","console","log","getDietLabels","map","dietLabel","getHealthLabels","healthLabel","splice","caloriesPerServing","Math","ceil","class","href","target","rel","src","undefined","length","Popup","trigger","header","content","className","ingredient","text","basic","on","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","async","fetch","response","json","data","hits","id","onSubmit","e","preventDefault","setTimeout","scroll","scrollTo","method","action","type","value","onChange","placeholder","required","name","recipe","key","label","yield","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.58af846c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./recipe-module.css\";\r\nimport { Popup } from 'semantic-ui-react'\r\n\r\nconst Recipe = ({ title, dietLabels, healthLabels, calories, servings, source, image, ingredients, url }) => {\r\n\r\n  console.log(healthLabels)\r\n  let getDietLabels = [];\r\n  dietLabels.map(dietLabel => (\r\n    getDietLabels[0] = dietLabel\r\n  ));\r\n\r\n  let getHealthLabels = [];\r\n  healthLabels.map(healthLabel => (\r\n    getHealthLabels[0] = healthLabel\r\n  ));\r\n\r\n  if (getHealthLabels[0] === 'Alcohol-Free') {\r\n    getHealthLabels.splice(0, 1);\r\n  }\r\n\r\n  var caloriesPerServing = Math.ceil(calories) / servings;\r\n  return (\r\n    <div class=\"ui card\">\r\n      <a class=\"recipe-image\" href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n        <img src={image} />\r\n      </a>\r\n      <div class=\"content\">\r\n        <a class=\"header\" href={url} target=\"_blank\" rel=\"noopener noreferrer\">{title}</a>\r\n        <div class=\"meta\"><span>Calories per serving: {Math.ceil(caloriesPerServing)}</span></div>\r\n        <a class=\"description\">Recipe from: {source}</a>\r\n      </div>\r\n      <div class=\"extra content\">\r\n        {getDietLabels === undefined ? null : getDietLabels.length === 0 ? null : <h7 >{getDietLabels[0]}</h7>}\r\n        {getHealthLabels === undefined ? null : getHealthLabels.length === 0 ? null : <h7 >{getHealthLabels[0]}</h7>}\r\n\r\n      </div>\r\n      <div>\r\n        <Popup\r\n          trigger={<div class=\"ui bottom attached button\"><i class=\"add icon\"></i>Preview Ingredients</div>}\r\n          header=\"Ingredients\"\r\n          content={<ul className=\"ingredient\">\r\n            {ingredients.map(ingredient => (\r\n              <li>{ingredient.text}</li>\r\n            ))}\r\n          </ul>}\r\n          basic\r\n          on='click'\r\n        />\r\n      </div>\r\n    </div >\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n","import React, { useEffect, useState } from \"react\";\nimport Recipe from \"./Recipe\";\nimport \"./App.css\";\nimport { animateScroll as scroll } from 'react-scroll'\n\nconst App = () => {\n  const APP_ID = \"92c867da\";\n  const APP_KEY = \"430b2e13b5f74eeda561b7536e06b5e6\";\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}&from=0&to=25`\n    );\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  };\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n    setTimeout(() => { scroll.scrollTo(600); }, 1000);\n\n  };\n\n  return (\n    <div class=\"App\">\n      <div class=\"search\">\n        <div id=\"cover\">\n          <form onSubmit={getSearch} method=\"get\" action=\"\">\n            <div class=\"tb\">\n              <div class=\"td\">\n                <input type=\"text\"\n                  value={search}\n                  onChange={updateSearch} placeholder=\"Search\" required /></div>\n              <div class=\"td\" id=\"s-cover\">\n                <button type=\"submit\">\n                  <div id=\"s-circle\"></div>\n                  <span></span>\n                </button>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n      <div class=\"cards\" name=\"cards\">\n        {recipes.map(recipe => (\n          <Recipe\n            key={recipe.recipe.label}\n            title={recipe.recipe.label}\n            dietLabels={recipe.recipe.dietLabels}\n            healthLabels={recipe.recipe.healthLabels}\n            calories={recipe.recipe.calories}\n            servings={recipe.recipe.yield}\n            source={recipe.recipe.source}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n            url={recipe.recipe.url}\n          />\n        ))}\n      </div>\n    </div >\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}